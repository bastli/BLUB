Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_mulsi3.o)
                              main.o (__mulsi3)
/usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o (exit)
/usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

xModemBuffer        0x81              main.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o
LOAD main.o
LOAD /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x6ec
 *(.vectors)
 .vectors       0x0000000000000000       0x34 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000034                . = ALIGN (0x2)
                0x0000000000000034                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000034        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000034                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000034                __ctors_start = .
 *(.ctors)
                0x0000000000000034                __ctors_end = .
                0x0000000000000034                __dtors_start = .
 *(.dtors)
                0x0000000000000034                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000034        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o
                0x0000000000000034                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000034        0xc /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000040       0x16 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
                0x0000000000000040                __do_copy_data
 .init4         0x0000000000000056       0x10 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
                0x0000000000000056                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000066        0x4 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o
 *(.init9)
 *(.text)
 .text          0x000000000000006a        0x2 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o
                0x000000000000006a                __vector_22
                0x000000000000006a                __vector_1
                0x000000000000006a                __vector_24
                0x000000000000006a                __vector_12
                0x000000000000006a                __bad_interrupt
                0x000000000000006a                __vector_6
                0x000000000000006a                __vector_3
                0x000000000000006a                __vector_23
                0x000000000000006a                __vector_25
                0x000000000000006a                __vector_11
                0x000000000000006a                __vector_13
                0x000000000000006a                __vector_17
                0x000000000000006a                __vector_19
                0x000000000000006a                __vector_7
                0x000000000000006a                __vector_5
                0x000000000000006a                __vector_4
                0x000000000000006a                __vector_9
                0x000000000000006a                __vector_2
                0x000000000000006a                __vector_21
                0x000000000000006a                __vector_15
                0x000000000000006a                __vector_8
                0x000000000000006a                __vector_14
                0x000000000000006a                __vector_10
                0x000000000000006a                __vector_16
                0x000000000000006a                __vector_18
                0x000000000000006a                __vector_20
 .text          0x000000000000006c      0x63e main.o
                0x000000000000006c                waitForTimer
                0x0000000000000078                readFlash
                0x0000000000000110                readLine
                0x0000000000000144                writeFlash
                0x00000000000001fa                calcCRC
                0x000000000000024e                putchar
                0x0000000000000262                xModemReceiver
                0x00000000000004f4                receiveChar
                0x000000000000052a                writeRegs
                0x000000000000055c                spiTransfer
                0x000000000000056c                init
                0x00000000000005c0                main
 .text          0x00000000000006aa        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_mulsi3.o)
 .text          0x00000000000006aa        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
 .text          0x00000000000006aa        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
 .text          0x00000000000006aa        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
                0x00000000000006aa                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00000000000006aa       0x3e /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_mulsi3.o)
                0x00000000000006aa                __mulsi3
 .text.libgcc   0x00000000000006e8        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x00000000000006e8        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000000000006e8        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
                0x00000000000006e8                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000006e8        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
                0x00000000000006e8                exit
                0x00000000000006e8                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000006e8        0x4 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000006ec                _etext = .

.data           0x0000000000800100        0x0 load address 0x00000000000006ec
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o
 .data          0x0000000000800100        0x0 main.o
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_mulsi3.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800100                . = ALIGN (0x2)
                0x0000000000800100                _edata = .
                0x0000000000800100                PROVIDE (__data_end, .)

.bss            0x0000000000800100       0x81
                0x0000000000800100                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o
 .bss           0x0000000000800100        0x0 main.o
 .bss           0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_mulsi3.o)
 .bss           0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
 .bss           0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
 .bss           0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800100       0x81 main.o
                0x0000000000800100                xModemBuffer
                0x0000000000800181                PROVIDE (__bss_end, .)
                0x00000000000006ec                __data_load_start = LOADADDR (.data)
                0x00000000000006ec                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800181        0x0
                0x0000000000800181                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800181                PROVIDE (__noinit_end, .)
                0x0000000000800181                _end = .
                0x0000000000800181                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000      0x6b4
 *(.stab)
 .stab          0x0000000000000000      0x6b4 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o

.stabstr        0x0000000000000000       0x54
 *(.stabstr)
 .stabstr       0x0000000000000000       0x54 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm88.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges  0x0000000000000000       0x20
 *(.debug_aranges)
 .debug_aranges
                0x0000000000000000       0x20 main.o

.debug_pubnames
                0x0000000000000000       0xc9
 *(.debug_pubnames)
 .debug_pubnames
                0x0000000000000000       0xc9 main.o

.debug_info     0x0000000000000000      0x793
 *(.debug_info)
 .debug_info    0x0000000000000000      0x793 main.o
 *(.gnu.linkonce.wi.*)

.debug_abbrev   0x0000000000000000      0x28a
 *(.debug_abbrev)
 .debug_abbrev  0x0000000000000000      0x28a main.o

.debug_line     0x0000000000000000      0x847
 *(.debug_line)
 .debug_line    0x0000000000000000      0x847 main.o

.debug_frame    0x0000000000000000       0xd0
 *(.debug_frame)
 .debug_frame   0x0000000000000000       0xd0 main.o

.debug_str      0x0000000000000000      0x159
 *(.debug_str)
 .debug_str     0x0000000000000000      0x159 main.o
                                        0x192 (size before relaxing)

.debug_loc      0x0000000000000000      0x58e
 *(.debug_loc)
 .debug_loc     0x0000000000000000      0x58e main.o

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(wafad.elf elf32-avr)
LOAD linker stubs

.debug_ranges   0x0000000000000000       0x80
 .debug_ranges  0x0000000000000000       0x80 main.o
