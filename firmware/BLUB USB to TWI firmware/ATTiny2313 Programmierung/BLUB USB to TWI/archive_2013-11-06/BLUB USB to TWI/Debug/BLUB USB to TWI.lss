
BLUB USB to TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000288  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  0000031c  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a67  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000078  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000048a  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002bf  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002da  00000000  00000000  00001257  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000114  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000235  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f3  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	8e c0       	rjmp	.+284    	; 0x12c <__vector_7>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a2 37       	cpi	r26, 0x72	; 114
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	3d d0       	rcall	.+122    	; 0xba <main>
  40:	21 c1       	rjmp	.+578    	; 0x284 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <led_setup>:
void uart_init(void);

#define SLAVE_ADDRESS 0x60

void led_setup()
{
  44:	1f 93       	push	r17
  46:	cf 93       	push	r28
  48:	df 93       	push	r29
  4a:	cd b7       	in	r28, 0x3d	; 61
  4c:	dd 27       	eor	r29, r29
  4e:	c3 50       	subi	r28, 0x03	; 3
  50:	cd bf       	out	0x3d, r28	; 61
	unsigned char TWI_targetSlaveAddress   = SLAVE_ADDRESS;
	
	unsigned char twi_buf[3];
	twi_buf[0] = (TWI_targetSlaveAddress<<TWI_ADR_BITS) | (FALSE<<TWI_READ_BIT);
  52:	80 ec       	ldi	r24, 0xC0	; 192
  54:	89 83       	std	Y+1, r24	; 0x01
	twi_buf[1] = 0x00;
  56:	1a 82       	std	Y+2, r1	; 0x02
	twi_buf[2] = 0x00;
  58:	1b 82       	std	Y+3, r1	; 0x03
	USI_TWI_Start_Transceiver_With_Data( twi_buf, 3);
  5a:	63 e0       	ldi	r22, 0x03	; 3
  5c:	ce 01       	movw	r24, r28
  5e:	01 96       	adiw	r24, 0x01	; 1
  60:	b9 d0       	rcall	.+370    	; 0x1d4 <USI_TWI_Start_Transceiver_With_Data>
	
	twi_buf[1] = 0x14;
  62:	84 e1       	ldi	r24, 0x14	; 20
  64:	8a 83       	std	Y+2, r24	; 0x02
	twi_buf[2] = 0xAA;
  66:	1a ea       	ldi	r17, 0xAA	; 170
  68:	1b 83       	std	Y+3, r17	; 0x03
	USI_TWI_Start_Transceiver_With_Data( twi_buf, 3);
  6a:	63 e0       	ldi	r22, 0x03	; 3
  6c:	ce 01       	movw	r24, r28
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	b1 d0       	rcall	.+354    	; 0x1d4 <USI_TWI_Start_Transceiver_With_Data>
	
	twi_buf[1] = 0x15;
  72:	85 e1       	ldi	r24, 0x15	; 21
  74:	8a 83       	std	Y+2, r24	; 0x02
	twi_buf[2] = 0xAA;
  76:	1b 83       	std	Y+3, r17	; 0x03
	USI_TWI_Start_Transceiver_With_Data( twi_buf, 3);
  78:	63 e0       	ldi	r22, 0x03	; 3
  7a:	ce 01       	movw	r24, r28
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	aa d0       	rcall	.+340    	; 0x1d4 <USI_TWI_Start_Transceiver_With_Data>
	
	twi_buf[1] = 0x16;
  80:	86 e1       	ldi	r24, 0x16	; 22
  82:	8a 83       	std	Y+2, r24	; 0x02
	twi_buf[2] = 0xAA;
  84:	1b 83       	std	Y+3, r17	; 0x03
	USI_TWI_Start_Transceiver_With_Data( twi_buf, 3);
  86:	63 e0       	ldi	r22, 0x03	; 3
  88:	ce 01       	movw	r24, r28
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	a3 d0       	rcall	.+326    	; 0x1d4 <USI_TWI_Start_Transceiver_With_Data>
	
	twi_buf[1] = 0x17;
  8e:	87 e1       	ldi	r24, 0x17	; 23
  90:	8a 83       	std	Y+2, r24	; 0x02
	twi_buf[2] = 0xAA;
  92:	1b 83       	std	Y+3, r17	; 0x03
	USI_TWI_Start_Transceiver_With_Data( twi_buf, 3);
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	ce 01       	movw	r24, r28
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	9c d0       	rcall	.+312    	; 0x1d4 <USI_TWI_Start_Transceiver_With_Data>
}
  9c:	cd 5f       	subi	r28, 0xFD	; 253
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	1f 91       	pop	r17
  a6:	08 95       	ret

000000a8 <uart_init>:
		}
	}
}

void uart_init(void) {
	UBRRH = 0x00;
  a8:	12 b8       	out	0x02, r1	; 2
	UBRRL = 0x00;	// Baudrate auf 0.5Mbps
  aa:	19 b8       	out	0x09, r1	; 9
	UCSRA = (1 << U2X); // Baudrate verdoppeln ->1Mbps!!
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);  //Receiver und Transmitter enabled und Receive Complete Interrupt enabled
  b0:	88 e9       	ldi	r24, 0x98	; 152
  b2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8 bit character size, no parity Byte, 1 stop Byte; 
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	83 b9       	out	0x03, r24	; 3
  b8:	08 95       	ret

000000ba <main>:
	twi_buf[2] = 0xAA;
	USI_TWI_Start_Transceiver_With_Data( twi_buf, 3);
}

int main(void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	dd 27       	eor	r29, r29
  c2:	c3 50       	subi	r28, 0x03	; 3
  c4:	cd bf       	out	0x3d, r28	; 61
	uart_init();
  c6:	f0 df       	rcall	.-32     	; 0xa8 <uart_init>
	
	
	USI_TWI_Master_Initialise();
  c8:	55 d0       	rcall	.+170    	; 0x174 <USI_TWI_Master_Initialise>
	
	sei();
  ca:	78 94       	sei
	
	unsigned char TWI_targetSlaveAddress   = SLAVE_ADDRESS;
	unsigned char twi_buf[3];
	twi_buf[0] = (TWI_targetSlaveAddress<<TWI_ADR_BITS) | (FALSE<<TWI_READ_BIT);
  cc:	80 ec       	ldi	r24, 0xC0	; 192
  ce:	89 83       	std	Y+1, r24	; 0x01
	
	led_setup();
  d0:	b9 df       	rcall	.-142    	; 0x44 <led_setup>
  d2:	81 e6       	ldi	r24, 0x61	; 97
  d4:	90 e0       	ldi	r25, 0x00	; 0
	twi_buf[1] = 0x17;
	twi_buf[2] = 0xAA;
	USI_TWI_Start_Transceiver_With_Data( twi_buf, 3);
}

int main(void)
  d6:	21 e7       	ldi	r18, 0x71	; 113
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	fc 01       	movw	r30, r24
	
	led_setup();
	
	unsigned int j;
	for(j = 0; j < 16; j++)
		g_LEDs[j] = 0xFF;
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	41 93       	st	Z+, r20
	twi_buf[0] = (TWI_targetSlaveAddress<<TWI_ADR_BITS) | (FALSE<<TWI_READ_BIT);
	
	led_setup();
	
	unsigned int j;
	for(j = 0; j < 16; j++)
  e0:	e2 17       	cp	r30, r18
  e2:	f3 07       	cpc	r31, r19
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x24>
  e6:	e1 2c       	mov	r14, r1
  e8:	f1 2c       	mov	r15, r1
	
	while(1)
	{
		for(j = 0; j < 100; j++)
		{
			led_setup();
  ea:	88 2e       	mov	r8, r24
  ec:	99 2e       	mov	r9, r25
  ee:	68 94       	set
  f0:	aa 24       	eor	r10, r10
  f2:	a1 f8       	bld	r10, 1
	for(j = 0; j < 16; j++)
		g_LEDs[j] = 0xFF;
	
	while(1)
	{
		for(j = 0; j < 100; j++)
  f4:	c1 2c       	mov	r12, r1
  f6:	d1 2c       	mov	r13, r1
		{
			led_setup();
  f8:	a5 df       	rcall	.-182    	; 0x44 <led_setup>
  fa:	08 2d       	mov	r16, r8
  fc:	19 2d       	mov	r17, r9
  fe:	ba 2c       	mov	r11, r10
			
			unsigned int i;
			for(i = 0; i < 16; i++)
			{
				twi_buf[1] = 0x02 + i;
 100:	ba 82       	std	Y+2, r11	; 0x02
				twi_buf[2] = g_LEDs[i];
 102:	f8 01       	movw	r30, r16
 104:	81 91       	ld	r24, Z+
 106:	8f 01       	movw	r16, r30
 108:	8b 83       	std	Y+3, r24	; 0x03
				USI_TWI_Start_Transceiver_With_Data( twi_buf, 3);
 10a:	63 e0       	ldi	r22, 0x03	; 3
 10c:	ce 01       	movw	r24, r28
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	61 d0       	rcall	.+194    	; 0x1d4 <USI_TWI_Start_Transceiver_With_Data>
 112:	b3 94       	inc	r11
		for(j = 0; j < 100; j++)
		{
			led_setup();
			
			unsigned int i;
			for(i = 0; i < 16; i++)
 114:	f2 e1       	ldi	r31, 0x12	; 18
 116:	bf 12       	cpse	r11, r31
 118:	f3 cf       	rjmp	.-26     	; 0x100 <__stack+0x21>
	for(j = 0; j < 16; j++)
		g_LEDs[j] = 0xFF;
	
	while(1)
	{
		for(j = 0; j < 100; j++)
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	e8 1a       	sub	r14, r24
 11e:	f8 0a       	sbc	r15, r24
 120:	e4 e6       	ldi	r30, 0x64	; 100
 122:	ee 16       	cp	r14, r30
 124:	f1 04       	cpc	r15, r1
 126:	40 f3       	brcs	.-48     	; 0xf8 <__stack+0x19>
 128:	76 01       	movw	r14, r12
 12a:	e6 cf       	rjmp	.-52     	; 0xf8 <__stack+0x19>

0000012c <__vector_7>:
	UCSRA = (1 << U2X); // Baudrate verdoppeln ->1Mbps!!
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);  //Receiver und Transmitter enabled und Receive Complete Interrupt enabled
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8 bit character size, no parity Byte, 1 stop Byte; 
}

ISR(USART_RX_vect) {
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	unsigned char data = UDR;
 13e:	9c b1       	in	r25, 0x0c	; 12
	
	if(data == 0xFF) {
 140:	9f 3f       	cpi	r25, 0xFF	; 255
 142:	19 f4       	brne	.+6      	; 0x14a <__vector_7+0x1e>
		g_counter = 0;
 144:	10 92 60 00 	sts	0x0060, r1
 148:	0c c0       	rjmp	.+24     	; 0x162 <__vector_7+0x36>
	}
	else if(g_counter != 16)
 14a:	80 91 60 00 	lds	r24, 0x0060
 14e:	80 31       	cpi	r24, 0x10	; 16
 150:	41 f0       	breq	.+16     	; 0x162 <__vector_7+0x36>
	{
		g_LEDs[g_counter] = data;
 152:	e8 2f       	mov	r30, r24
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ef 59       	subi	r30, 0x9F	; 159
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	90 83       	st	Z, r25
		g_counter++;
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 60 00 	sts	0x0060, r24
	}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <USI_TWI_Master_Initialise>:
/*---------------------------------------------------------------
 USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise( void )
{
  PORT_USI |= (1<<PIN_USI_SDA);           // Enable pullup on SDA, to set high as released state.
 174:	c5 9a       	sbi	0x18, 5	; 24
  PORT_USI |= (1<<PIN_USI_SCL);           // Enable pullup on SCL, to set high as released state.
 176:	c7 9a       	sbi	0x18, 7	; 24
  
  DDR_USI  |= (1<<PIN_USI_SCL);           // Enable SCL as output.
 178:	bf 9a       	sbi	0x17, 7	; 23
  DDR_USI  |= (1<<PIN_USI_SDA);           // Enable SDA as output.
 17a:	bd 9a       	sbi	0x17, 5	; 23
  
  USIDR    =  0xFF;                       // Preload dataregister with "released level" data.
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	8f b9       	out	0x0f, r24	; 15
  USICR    =  (0<<USISIE)|(0<<USIOIE)|                            // Disable Interrupts.
 180:	8a e2       	ldi	r24, 0x2A	; 42
 182:	8d b9       	out	0x0d, r24	; 13
              (1<<USIWM1)|(0<<USIWM0)|                            // Set USI in Two-wire mode.
              (1<<USICS1)|(0<<USICS0)|(1<<USICLK)|                // Software stobe as counter clock source
              (0<<USITC);
  USISR   =   (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|      // Clear flags,
 184:	80 ef       	ldi	r24, 0xF0	; 240
 186:	8e b9       	out	0x0e, r24	; 14
 188:	08 95       	ret

0000018a <USI_TWI_Master_Transfer>:
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer( unsigned char temp )
{
  USISR = temp;                                     // Set USISR according to temp.
 18a:	8e b9       	out	0x0e, r24	; 14
           (1<<USICS1)|(0<<USICS0)|(1<<USICLK)|     // Software clock strobe as source.
           (1<<USITC);                              // Toggle Clock Port.
  do
  {
    __delay_cycles( T2_TWI );              
    USICR = temp;                          // Generate positve SCL edge.
 18c:	8b e2       	ldi	r24, 0x2B	; 43
           (1<<USIWM1)|(0<<USIWM0)|                 // Set USI in Two-wire mode.
           (1<<USICS1)|(0<<USICS0)|(1<<USICLK)|     // Software clock strobe as source.
           (1<<USITC);                              // Toggle Clock Port.
  do
  {
    __delay_cycles( T2_TWI );              
 18e:	97 e0       	ldi	r25, 0x07	; 7
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <USI_TWI_Master_Transfer+0x6>
    USICR = temp;                          // Generate positve SCL edge.
 194:	8d b9       	out	0x0d, r24	; 13
    while( !(PIN_USI & (1<<PIN_USI_SCL)) );// Wait for SCL to go high.
 196:	b7 9b       	sbis	0x16, 7	; 22
 198:	fe cf       	rjmp	.-4      	; 0x196 <USI_TWI_Master_Transfer+0xc>
    __delay_cycles( T4_TWI );              
 19a:	93 e0       	ldi	r25, 0x03	; 3
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <USI_TWI_Master_Transfer+0x12>
 1a0:	00 00       	nop
    USICR = temp;                          // Generate negative SCL edge.
 1a2:	8d b9       	out	0x0d, r24	; 13
  }while( !(USISR & (1<<USIOIF)) );        // Check for transfer complete.
 1a4:	76 9b       	sbis	0x0e, 6	; 14
 1a6:	f3 cf       	rjmp	.-26     	; 0x18e <USI_TWI_Master_Transfer+0x4>
  
  __delay_cycles( T2_TWI );                
 1a8:	87 e0       	ldi	r24, 0x07	; 7
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <USI_TWI_Master_Transfer+0x20>
  temp  = USIDR;                           // Read out data.
 1ae:	8f b1       	in	r24, 0x0f	; 15
  USIDR = 0xFF;                            // Release SDA.
 1b0:	9f ef       	ldi	r25, 0xFF	; 255
 1b2:	9f b9       	out	0x0f, r25	; 15
  DDR_USI |= (1<<PIN_USI_SDA);             // Enable SDA as output.
 1b4:	bd 9a       	sbi	0x17, 5	; 23

  return temp;                             // Return the data from the USIDR
}
 1b6:	08 95       	ret

000001b8 <USI_TWI_Master_Stop>:
 Function for generating a TWI Stop Condition. Used to release 
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop( void )
{
  PORT_USI &= ~(1<<PIN_USI_SDA);           // Pull SDA low.
 1b8:	c5 98       	cbi	0x18, 5	; 24
  PORT_USI |= (1<<PIN_USI_SCL);            // Release SCL.
 1ba:	c7 9a       	sbi	0x18, 7	; 24
  while( !(PIN_USI & (1<<PIN_USI_SCL)) );  // Wait for SCL to go high.
 1bc:	b7 9b       	sbis	0x16, 7	; 22
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <USI_TWI_Master_Stop+0x4>
  __delay_cycles( T4_TWI );               
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	8a 95       	dec	r24
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <USI_TWI_Master_Stop+0xa>
 1c6:	00 00       	nop
  PORT_USI |= (1<<PIN_USI_SDA);            // Release SDA.
 1c8:	c5 9a       	sbi	0x18, 5	; 24
  __delay_cycles( T2_TWI );                
 1ca:	87 e0       	ldi	r24, 0x07	; 7
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <USI_TWI_Master_Stop+0x14>
    return (FALSE);
  }
#endif

  return (TRUE);
}
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 95       	ret

000001d4 <USI_TWI_Start_Transceiver_With_Data>:
 
 Success or error code is returned. Error codes are defined in 
 USI_TWI_Master.h
---------------------------------------------------------------*/
unsigned char USI_TWI_Start_Transceiver_With_Data( unsigned char *msg, unsigned char msgSize)
{
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	16 2f       	mov	r17, r22
                                 (0x0<<USICNT0);                                     // set USI to shift 8 bits i.e. count 16 clock edges.
  unsigned char tempUSISR_1bit = (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|      // Prepare register value to: Clear flags, and
                                 (0xE<<USICNT0);                                     // set USI to shift 1 bit i.e. count 2 clock edges.

  USI_TWI_state.errorState = 0;
  USI_TWI_state.addressMode = TRUE;
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	20 93 71 00 	sts	0x0071, r18
    USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
    return (FALSE);
  }
#endif

  if ( !(*msg & (1<<TWI_READ_BIT)) )                // The LSB in the address byte determines if is a masterRead or masterWrite operation.
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 81       	ld	r18, Z
 1e8:	20 fd       	sbrc	r18, 0
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <USI_TWI_Start_Transceiver_With_Data+0x20>
  {
    USI_TWI_state.masterWriteDataMode = TRUE;
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	22 60       	ori	r18, 0x02	; 2
 1f0:	20 93 71 00 	sts	0x0071, r18
  }

/* Release SCL to ensure that (repeated) Start can be performed */
  PORT_USI |= (1<<PIN_USI_SCL);                     // Release SCL.
 1f4:	c7 9a       	sbi	0x18, 7	; 24
  while( !(PORT_USI & (1<<PIN_USI_SCL)) );          // Verify that SCL becomes high.
 1f6:	c7 9b       	sbis	0x18, 7	; 24
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <USI_TWI_Start_Transceiver_With_Data+0x22>
#ifdef TWI_FAST_MODE
  __delay_cycles( T4_TWI );                         // Delay for T4TWI if TWI_FAST_MODE
 1fa:	f3 e0       	ldi	r31, 0x03	; 3
 1fc:	fa 95       	dec	r31
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <USI_TWI_Start_Transceiver_With_Data+0x28>
 200:	00 00       	nop
#else
  __delay_cycles( T2_TWI );                         // Delay for T2TWI if TWI_STANDARD_MODE
#endif

/* Generate Start Condition */
  PORT_USI &= ~(1<<PIN_USI_SDA);                    // Force SDA LOW.
 202:	c5 98       	cbi	0x18, 5	; 24
  __delay_cycles( T4_TWI );                         
 204:	23 e0       	ldi	r18, 0x03	; 3
 206:	2a 95       	dec	r18
 208:	f1 f7       	brne	.-4      	; 0x206 <USI_TWI_Start_Transceiver_With_Data+0x32>
 20a:	00 00       	nop
  PORT_USI &= ~(1<<PIN_USI_SCL);                    // Pull SCL LOW.
 20c:	c7 98       	cbi	0x18, 7	; 24
  PORT_USI |= (1<<PIN_USI_SDA);                     // Release SDA.
 20e:	c5 9a       	sbi	0x18, 5	; 24
 210:	ec 01       	movw	r28, r24
      *(msg++)  = USI_TWI_Master_Transfer( tempUSISR_8bit );

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if( msgSize == 1)                            // If transmission of last byte was performed.
      {
        USIDR = 0xFF;                              // Load NACK to confirm End Of Transmission.
 212:	0f ef       	ldi	r16, 0xFF	; 255

/*Write address and Read/Write data */
  do
  {
    /* If masterWrite cycle (or inital address tranmission)*/
    if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode)
 214:	80 91 71 00 	lds	r24, 0x0071
 218:	83 70       	andi	r24, 0x03	; 3
 21a:	f1 f0       	breq	.+60     	; 0x258 <USI_TWI_Start_Transceiver_With_Data+0x84>
    {
      /* Write a byte */
      PORT_USI &= ~(1<<PIN_USI_SCL);                // Pull SCL LOW.
 21c:	c7 98       	cbi	0x18, 7	; 24
      USIDR     = *(msg++);                        // Setup data.
 21e:	88 81       	ld	r24, Y
 220:	8f b9       	out	0x0f, r24	; 15
      USI_TWI_Master_Transfer( tempUSISR_8bit );    // Send 8 bits on bus.
 222:	80 ef       	ldi	r24, 0xF0	; 240
 224:	b2 df       	rcall	.-156    	; 0x18a <USI_TWI_Master_Transfer>
      
      /* Clock and verify (N)ACK from slave */
      DDR_USI  &= ~(1<<PIN_USI_SDA);                // Enable SDA as input.
 226:	bd 98       	cbi	0x17, 5	; 23
      if( USI_TWI_Master_Transfer( tempUSISR_1bit ) & (1<<TWI_NACK_BIT) ) 
 228:	8e ef       	ldi	r24, 0xFE	; 254
 22a:	af df       	rcall	.-162    	; 0x18a <USI_TWI_Master_Transfer>
 22c:	80 ff       	sbrs	r24, 0
 22e:	0e c0       	rjmp	.+28     	; 0x24c <USI_TWI_Start_Transceiver_With_Data+0x78>
      {
        if ( USI_TWI_state.addressMode )
 230:	80 91 71 00 	lds	r24, 0x0071
 234:	80 ff       	sbrs	r24, 0
 236:	05 c0       	rjmp	.+10     	; 0x242 <USI_TWI_Start_Transceiver_With_Data+0x6e>
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	80 93 71 00 	sts	0x0071, r24
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	1c c0       	rjmp	.+56     	; 0x27a <USI_TWI_Start_Transceiver_With_Data+0xa6>
      if( USI_TWI_Master_Transfer( tempUSISR_1bit ) & (1<<TWI_NACK_BIT) ) 
      {
        if ( USI_TWI_state.addressMode )
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	80 93 71 00 	sts	0x0071, r24
        return (FALSE);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	17 c0       	rjmp	.+46     	; 0x27a <USI_TWI_Start_Transceiver_With_Data+0xa6>
      }
      USI_TWI_state.addressMode = FALSE;            // Only perform address transmission once.
 24c:	80 91 71 00 	lds	r24, 0x0071
 250:	8e 7f       	andi	r24, 0xFE	; 254
 252:	80 93 71 00 	sts	0x0071, r24
 256:	0b c0       	rjmp	.+22     	; 0x26e <USI_TWI_Start_Transceiver_With_Data+0x9a>
    }
    /* Else masterRead cycle*/
    else
    {
      /* Read a data byte */
      DDR_USI   &= ~(1<<PIN_USI_SDA);               // Enable SDA as input.
 258:	bd 98       	cbi	0x17, 5	; 23
      *(msg++)  = USI_TWI_Master_Transfer( tempUSISR_8bit );
 25a:	80 ef       	ldi	r24, 0xF0	; 240
 25c:	96 df       	rcall	.-212    	; 0x18a <USI_TWI_Master_Transfer>
 25e:	88 83       	st	Y, r24

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if( msgSize == 1)                            // If transmission of last byte was performed.
 260:	11 30       	cpi	r17, 0x01	; 1
 262:	11 f4       	brne	.+4      	; 0x268 <USI_TWI_Start_Transceiver_With_Data+0x94>
      {
        USIDR = 0xFF;                              // Load NACK to confirm End Of Transmission.
 264:	0f b9       	out	0x0f, r16	; 15
 266:	01 c0       	rjmp	.+2      	; 0x26a <USI_TWI_Start_Transceiver_With_Data+0x96>
      }
      else
      {
        USIDR = 0x00;                              // Load ACK. Set data register bit 7 (output for SDA) low.
 268:	1f b8       	out	0x0f, r1	; 15
      }
      USI_TWI_Master_Transfer( tempUSISR_1bit );   // Generate ACK/NACK.
 26a:	8e ef       	ldi	r24, 0xFE	; 254
 26c:	8e df       	rcall	.-228    	; 0x18a <USI_TWI_Master_Transfer>
    }
  }while( --msgSize) ;                             // Until all data sent/received.
 26e:	11 50       	subi	r17, 0x01	; 1
 270:	21 96       	adiw	r28, 0x01	; 1
 272:	11 11       	cpse	r17, r1
 274:	cf cf       	rjmp	.-98     	; 0x214 <USI_TWI_Start_Transceiver_With_Data+0x40>
  
  USI_TWI_Master_Stop();                           // Send a STOP condition on the TWI bus.
 276:	a0 df       	rcall	.-192    	; 0x1b8 <USI_TWI_Master_Stop>

/* Transmission successfully completed*/
  return (TRUE);
 278:	81 e0       	ldi	r24, 0x01	; 1
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
