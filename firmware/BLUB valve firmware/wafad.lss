
wafad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000092  00800100  00800100  00000650  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000f8  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f4  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000018c  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ae  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016c  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f1  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000044  00000000  00000000  000024e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	1e c0       	rjmp	.+60     	; 0x62 <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 39       	cpi	r26, 0x92	; 146
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	24 d2       	rcall	.+1096   	; 0x49a <main>
  52:	c2 c2       	rjmp	.+1412   	; 0x5d8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <waitForTimer>:

}

void waitForTimer()
{
	while(!(TIFR1&(1<<OCF1A)))
  56:	01 c0       	rjmp	.+2      	; 0x5a <waitForTimer+0x4>
		asm("nop");
  58:	00 00       	nop

}

void waitForTimer()
{
	while(!(TIFR1&(1<<OCF1A)))
  5a:	b1 9b       	sbis	0x16, 1	; 22
  5c:	fd cf       	rjmp	.-6      	; 0x58 <waitForTimer+0x2>
		asm("nop");
	/* clear the flag */
	TIFR1 |= (1<<OCF1A);
  5e:	b1 9a       	sbi	0x16, 1	; 22
}
  60:	08 95       	ret

00000062 <__vector_18>:


ISR(USART_RX_vect)
{
  62:	1f 92       	push	r1
  64:	0f 92       	push	r0
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	0f 92       	push	r0
  6a:	11 24       	eor	r1, r1
  6c:	2f 93       	push	r18
  6e:	8f 93       	push	r24
  70:	9f 93       	push	r25
  72:	af 93       	push	r26
  74:	bf 93       	push	r27
  76:	ef 93       	push	r30
  78:	ff 93       	push	r31
	uint8_t ch = UDR0;
  7a:	20 91 c6 00 	lds	r18, 0x00C6
	
	if (rxInd < LINE_LENGTH)
  7e:	80 91 04 01 	lds	r24, 0x0104
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	f0 f4       	brcc	.+60     	; 0xc2 <__vector_18+0x60>
	{
		if (rxInd == 0)
  86:	80 91 04 01 	lds	r24, 0x0104
  8a:	88 23       	and	r24, r24
  8c:	81 f4       	brne	.+32     	; 0xae <__vector_18+0x4c>
		{
			// this is the first byte, save the current system tick value to measure the reception time
			rxStart = sysTick;	
  8e:	80 91 00 01 	lds	r24, 0x0100
  92:	90 91 01 01 	lds	r25, 0x0101
  96:	a0 91 02 01 	lds	r26, 0x0102
  9a:	b0 91 03 01 	lds	r27, 0x0103
  9e:	80 93 05 01 	sts	0x0105, r24
  a2:	90 93 06 01 	sts	0x0106, r25
  a6:	a0 93 07 01 	sts	0x0107, r26
  aa:	b0 93 08 01 	sts	0x0108, r27
		}
		// place data in the receive buffer
		rxBuf[rxInd++] = ch;
  ae:	80 91 04 01 	lds	r24, 0x0104
  b2:	e8 2f       	mov	r30, r24
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	e6 57       	subi	r30, 0x76	; 118
  b8:	fe 4f       	sbci	r31, 0xFE	; 254
  ba:	20 83       	st	Z, r18
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 04 01 	sts	0x0104, r24
	}
	else
	{
		// line or buffer overflow, what should we do?	
	}
}
  c2:	ff 91       	pop	r31
  c4:	ef 91       	pop	r30
  c6:	bf 91       	pop	r27
  c8:	af 91       	pop	r26
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	2f 91       	pop	r18
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <calcCRC>:
	return 1;
}

/* CRC algorithm */
uint16_t calcCRC(uint8_t c, uint16_t crc)
{
  da:	98 e0       	ldi	r25, 0x08	; 8
	{
		if (crc & 0x8000) 
		{
			crc <<= 1;
			crc |= ((c&0x80)?1:0);
			crc ^= 0x1021;
  dc:	e1 e2       	ldi	r30, 0x21	; 33
  de:	f0 e1       	ldi	r31, 0x10	; 16
  e0:	9b 01       	movw	r18, r22
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	48 2f       	mov	r20, r24
  e8:	55 27       	eor	r21, r21
  ea:	47 fd       	sbrc	r20, 7
  ec:	50 95       	com	r21
uint16_t calcCRC(uint8_t c, uint16_t crc)
{
	uint8_t i;
	for (i=0; i<8; i++)
	{
		if (crc & 0x8000) 
  ee:	77 ff       	sbrs	r23, 7
  f0:	0a c0       	rjmp	.+20     	; 0x106 <calcCRC+0x2c>
		{
			crc <<= 1;
			crc |= ((c&0x80)?1:0);
  f2:	ba 01       	movw	r22, r20
  f4:	66 27       	eor	r22, r22
  f6:	77 0f       	add	r23, r23
  f8:	66 1f       	adc	r22, r22
  fa:	77 27       	eor	r23, r23
  fc:	62 2b       	or	r22, r18
  fe:	73 2b       	or	r23, r19
			crc ^= 0x1021;
 100:	6e 27       	eor	r22, r30
 102:	7f 27       	eor	r23, r31
 104:	07 c0       	rjmp	.+14     	; 0x114 <calcCRC+0x3a>
		}
		else
		{
			crc <<= 1;
			crc |= ((c&0x80)?1:0);
 106:	ba 01       	movw	r22, r20
 108:	66 27       	eor	r22, r22
 10a:	77 0f       	add	r23, r23
 10c:	66 1f       	adc	r22, r22
 10e:	77 27       	eor	r23, r23
 110:	62 2b       	or	r22, r18
 112:	73 2b       	or	r23, r19
 114:	91 50       	subi	r25, 0x01	; 1

/* CRC algorithm */
uint16_t calcCRC(uint8_t c, uint16_t crc)
{
	uint8_t i;
	for (i=0; i<8; i++)
 116:	11 f0       	breq	.+4      	; 0x11c <calcCRC+0x42>
		else
		{
			crc <<= 1;
			crc |= ((c&0x80)?1:0);
		}
		c<<=1;
 118:	88 0f       	add	r24, r24
 11a:	e2 cf       	rjmp	.-60     	; 0xe0 <calcCRC+0x6>
	}
	return crc;
}
 11c:	cb 01       	movw	r24, r22
 11e:	08 95       	ret

00000120 <putchar>:

void putchar (char c)
{
	while (!(UCSR0A&(1<<UDRE0)))
 120:	01 c0       	rjmp	.+2      	; 0x124 <putchar+0x4>
		asm("nop");
 122:	00 00       	nop
	return crc;
}

void putchar (char c)
{
	while (!(UCSR0A&(1<<UDRE0)))
 124:	90 91 c0 00 	lds	r25, 0x00C0
 128:	95 ff       	sbrs	r25, 5
 12a:	fb cf       	rjmp	.-10     	; 0x122 <putchar+0x2>
		asm("nop");
	UDR0 = c;
 12c:	80 93 c6 00 	sts	0x00C6, r24
}
 130:	08 95       	ret

00000132 <receiveChar>:
   returns 0 on timeout, 1 on success
*/
uint8_t receiveChar (uint8_t *c, uint8_t t)
{
	uint16_t i;
	for (i=0; i<(FRAME_RATE*((uint16_t)t));)
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	28 ee       	ldi	r18, 0xE8	; 232
 136:	33 e0       	ldi	r19, 0x03	; 3
 138:	62 9f       	mul	r22, r18
 13a:	a0 01       	movw	r20, r0
 13c:	63 9f       	mul	r22, r19
 13e:	50 0d       	add	r21, r0
 140:	72 9f       	mul	r23, r18
 142:	50 0d       	add	r21, r0
 144:	11 24       	eor	r1, r1
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	0f c0       	rjmp	.+30     	; 0x16a <receiveChar+0x38>
	{
		/* check the uart */
		if (UCSR0A&(1<<RXC0))
 14c:	60 91 c0 00 	lds	r22, 0x00C0
 150:	67 ff       	sbrs	r22, 7
 152:	06 c0       	rjmp	.+12     	; 0x160 <receiveChar+0x2e>
		{
			/* we have a byte */
			(*c) = UDR0;
 154:	20 91 c6 00 	lds	r18, 0x00C6
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
			return 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	08 95       	ret
		}
		//waitForTimer();
		if (TIFR1&(1<<OCF1A))
 160:	b1 9b       	sbis	0x16, 1	; 22
 162:	f4 cf       	rjmp	.-24     	; 0x14c <receiveChar+0x1a>
		{
			i++;
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
			TIFR1 |= (1<<OCF1A);
 168:	b1 9a       	sbi	0x16, 1	; 22
   returns 0 on timeout, 1 on success
*/
uint8_t receiveChar (uint8_t *c, uint8_t t)
{
	uint16_t i;
	for (i=0; i<(FRAME_RATE*((uint16_t)t));)
 16a:	24 17       	cp	r18, r20
 16c:	35 07       	cpc	r19, r21
 16e:	70 f3       	brcs	.-36     	; 0x14c <receiveChar+0x1a>
		{
			i++;
			TIFR1 |= (1<<OCF1A);
		}
	}
	return 0;
 170:	80 e0       	ldi	r24, 0x00	; 0
}
 172:	08 95       	ret

00000174 <spiTransfer>:
}

/* send a byte per spi, the received data is returned */
uint8_t spiTransfer (uint8_t d)
{
	SPDR = d;
 174:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR&(1<<SPIF)))
 176:	01 c0       	rjmp	.+2      	; 0x17a <spiTransfer+0x6>
			asm("nop");
 178:	00 00       	nop

/* send a byte per spi, the received data is returned */
uint8_t spiTransfer (uint8_t d)
{
	SPDR = d;
		while (!(SPSR&(1<<SPIF)))
 17a:	0d b4       	in	r0, 0x2d	; 45
 17c:	07 fe       	sbrs	r0, 7
 17e:	fc cf       	rjmp	.-8      	; 0x178 <spiTransfer+0x4>
			asm("nop");
	return (SPDR);
 180:	8e b5       	in	r24, 0x2e	; 46
}
 182:	08 95       	ret

00000184 <writeRegs>:
	return 0;
}

/* transfer one line to the relais driver shift regs */
void writeRegs (const unsigned char *d)
{
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
	unsigned char uch;	
	// setup correct spi mode
	CLR_LOAD();
 18e:	5d 9a       	sbi	0x0b, 5	; 11
	SPCR = (0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (1<<CPOL) | (0<<CPHA) | (1<<SPR1) | (1<<SPR0);
 190:	2b e5       	ldi	r18, 0x5B	; 91
 192:	2c bd       	out	0x2c, r18	; 44
	SPSR = 0;
 194:	1d bc       	out	0x2d, r1	; 45
 196:	e8 2e       	mov	r14, r24
 198:	e7 01       	movw	r28, r14
 19a:	7e 01       	movw	r14, r28
 19c:	f9 2e       	mov	r15, r25
 19e:	e7 01       	movw	r28, r14
 1a0:	18 e0       	ldi	r17, 0x08	; 8
	for (unsigned char i=0;i<LINE_LENGTH;i++)
	{
		uch = spiTransfer(d[i]);	
 1a2:	89 91       	ld	r24, Y+
 1a4:	e7 df       	rcall	.-50     	; 0x174 <spiTransfer>
 1a6:	11 50       	subi	r17, 0x01	; 1
	unsigned char uch;	
	// setup correct spi mode
	CLR_LOAD();
	SPCR = (0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (1<<CPOL) | (0<<CPHA) | (1<<SPR1) | (1<<SPR0);
	SPSR = 0;
	for (unsigned char i=0;i<LINE_LENGTH;i++)
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <writeRegs+0x1e>
	{
		uch = spiTransfer(d[i]);	
	}
	SET_LOAD();
 1aa:	5d 98       	cbi	0x0b, 5	; 11
	
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	08 95       	ret

000001b8 <writeFlash>:
	d 	 	pointer to data
	adr		address to write data at
	len		number of bytes to write
*/
uint8_t writeFlash(uint8_t *d, uint32_t adr, uint8_t len)
{
 1b8:	bf 92       	push	r11
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	d8 2e       	mov	r13, r24
 1cc:	c9 2e       	mov	r12, r25
 1ce:	7a 01       	movw	r14, r20
 1d0:	8b 01       	movw	r16, r22
 1d2:	b2 2e       	mov	r11, r18
	uint8_t i;
	/* setup correct spi mode */
	SPCR = (0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (0<<SPR0);
 1d4:	82 e5       	ldi	r24, 0x52	; 82
 1d6:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
 1d8:	1d bc       	out	0x2d, r1	; 45
	/* check validity of address */
	if (adr >= FLASH_SIZE)
 1da:	40 30       	cpi	r20, 0x00	; 0
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	52 07       	cpc	r21, r18
 1e0:	22 e0       	ldi	r18, 0x02	; 2
 1e2:	62 07       	cpc	r22, r18
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	72 07       	cpc	r23, r18
 1e8:	90 f5       	brcc	.+100    	; 0x24e <writeFlash+0x96>
		return 0;
	/* select flash */
	CLR_FLASH_CS();
 1ea:	29 98       	cbi	0x05, 1	; 5
	/* send read command */	
	spiTransfer(FLASH_WREN);
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	c2 df       	rcall	.-124    	; 0x174 <spiTransfer>
	SET_FLASH_CS();
 1f0:	29 9a       	sbi	0x05, 1	; 5
	for (i=0; i<100; i++)
 1f2:	80 e0       	ldi	r24, 0x00	; 0
		asm("nop");
 1f4:	00 00       	nop
	/* select flash */
	CLR_FLASH_CS();
	/* send read command */	
	spiTransfer(FLASH_WREN);
	SET_FLASH_CS();
	for (i=0; i<100; i++)
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	84 36       	cpi	r24, 0x64	; 100
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <writeFlash+0x3c>
		asm("nop");
	CLR_FLASH_CS();
 1fc:	29 98       	cbi	0x05, 1	; 5
	spiTransfer(FLASH_WRITE);
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	b9 df       	rcall	.-142    	; 0x174 <spiTransfer>
	spiTransfer((adr>>16)&0xff);
 202:	80 2f       	mov	r24, r16
 204:	b7 df       	rcall	.-146    	; 0x174 <spiTransfer>
	spiTransfer((adr>>8)&0xff);
 206:	8f 2d       	mov	r24, r15
 208:	b5 df       	rcall	.-150    	; 0x174 <spiTransfer>
	spiTransfer(adr&0xff);
 20a:	8e 2d       	mov	r24, r14
 20c:	b3 df       	rcall	.-154    	; 0x174 <spiTransfer>
	for (i=0; i<len; i++)
 20e:	c6 01       	movw	r24, r12
 210:	e9 2e       	mov	r14, r25
 212:	e7 01       	movw	r28, r14
 214:	7e 01       	movw	r14, r28
 216:	fc 2c       	mov	r15, r12
 218:	e7 01       	movw	r28, r14
 21a:	02 c0       	rjmp	.+4      	; 0x220 <writeFlash+0x68>
		spiTransfer(d[i]);
 21c:	89 91       	ld	r24, Y+
 21e:	aa df       	rcall	.-172    	; 0x174 <spiTransfer>
	CLR_FLASH_CS();
	spiTransfer(FLASH_WRITE);
	spiTransfer((adr>>16)&0xff);
	spiTransfer((adr>>8)&0xff);
	spiTransfer(adr&0xff);
	for (i=0; i<len; i++)
 220:	7e 01       	movw	r14, r28
 222:	ed 18       	sub	r14, r13
 224:	eb 14       	cp	r14, r11
 226:	d0 f3       	brcs	.-12     	; 0x21c <writeFlash+0x64>
		spiTransfer(d[i]);
	/* deactivate the flash */
	SET_FLASH_CS();	
 228:	29 9a       	sbi	0x05, 1	; 5
 22a:	84 e6       	ldi	r24, 0x64	; 100

	/* wait until the flash was written */
	for (i=0;i<100;i++)
		asm("nop");
 22c:	00 00       	nop
 22e:	81 50       	subi	r24, 0x01	; 1
		spiTransfer(d[i]);
	/* deactivate the flash */
	SET_FLASH_CS();	

	/* wait until the flash was written */
	for (i=0;i<100;i++)
 230:	e9 f7       	brne	.-6      	; 0x22c <writeFlash+0x74>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	08 c0       	rjmp	.+16     	; 0x246 <writeFlash+0x8e>
		asm("nop");
	i=1;
	while(i&0x01)
	{
		CLR_FLASH_CS();
 236:	29 98       	cbi	0x05, 1	; 5
		spiTransfer(FLASH_RDSR);
 238:	85 e0       	ldi	r24, 0x05	; 5
 23a:	9c df       	rcall	.-200    	; 0x174 <spiTransfer>
		i = spiTransfer(0x00);	
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	9a df       	rcall	.-204    	; 0x174 <spiTransfer>
		SET_FLASH_CS();
 240:	29 9a       	sbi	0x05, 1	; 5
		asm("nop");
 242:	00 00       	nop
		asm("nop");
 244:	00 00       	nop

	/* wait until the flash was written */
	for (i=0;i<100;i++)
		asm("nop");
	i=1;
	while(i&0x01)
 246:	80 fd       	sbrc	r24, 0
 248:	f6 cf       	rjmp	.-20     	; 0x236 <writeFlash+0x7e>
		SET_FLASH_CS();
		asm("nop");
		asm("nop");
	}

	return 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	01 c0       	rjmp	.+2      	; 0x250 <writeFlash+0x98>
	/* setup correct spi mode */
	SPCR = (0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (0<<SPR0);
	SPSR = 0;
	/* check validity of address */
	if (adr >= FLASH_SIZE)
		return 0;
 24e:	80 e0       	ldi	r24, 0x00	; 0
		asm("nop");
		asm("nop");
	}

	return 1;
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	df 90       	pop	r13
 25e:	cf 90       	pop	r12
 260:	bf 90       	pop	r11
 262:	08 95       	ret

00000264 <xModemReceiver>:
}


/* receives data via xModem and stores it to the flash memory */
void xModemReceiver()
{
 264:	8f 92       	push	r8
 266:	9f 92       	push	r9
 268:	af 92       	push	r10
 26a:	bf 92       	push	r11
 26c:	cf 92       	push	r12
 26e:	df 92       	push	r13
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	00 d0       	rcall	.+0      	; 0x27e <xModemReceiver+0x1a>
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
	uint8_t index=0;				/* data index within packet */
	uint8_t state=XMODEM_ST_IDLE;	/* receiver state machine */
	uint16_t crc=0;
	uint32_t flashIndex=0;			/* address to store the received data in flash */

	LED_ON();
 282:	41 9a       	sbi	0x08, 1	; 8
	/* clear the uart receive buffer */
	i = UDR0;
 284:	80 91 c6 00 	lds	r24, 0x00C6
	j = UDR0;
 288:	80 91 c6 00 	lds	r24, 0x00C6
 28c:	89 83       	std	Y+1, r24	; 0x01

	/* start transfer by sending an C */
	for (i=0; i<10; i++)
 28e:	20 e0       	ldi	r18, 0x00	; 0
	{
		putchar(XMODEM_C);
		/* wait one sec for an answer from the sender */
		if (receiveChar(&j,1))
 290:	8e 01       	movw	r16, r28
 292:	0f 5f       	subi	r16, 0xFF	; 255
 294:	1f 4f       	sbci	r17, 0xFF	; 255
	j = UDR0;

	/* start transfer by sending an C */
	for (i=0; i<10; i++)
	{
		putchar(XMODEM_C);
 296:	83 e4       	ldi	r24, 0x43	; 67
 298:	2a 83       	std	Y+2, r18	; 0x02
 29a:	42 df       	rcall	.-380    	; 0x120 <putchar>
		/* wait one sec for an answer from the sender */
		if (receiveChar(&j,1))
 29c:	c8 01       	movw	r24, r16
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	48 df       	rcall	.-368    	; 0x132 <receiveChar>
 2a2:	2a 81       	ldd	r18, Y+2	; 0x02
 2a4:	88 23       	and	r24, r24
 2a6:	21 f4       	brne	.+8      	; 0x2b0 <xModemReceiver+0x4c>
	/* clear the uart receive buffer */
	i = UDR0;
	j = UDR0;

	/* start transfer by sending an C */
	for (i=0; i<10; i++)
 2a8:	2f 5f       	subi	r18, 0xFF	; 255
 2aa:	2a 30       	cpi	r18, 0x0A	; 10
 2ac:	a1 f7       	brne	.-24     	; 0x296 <xModemReceiver+0x32>
 2ae:	2b c0       	rjmp	.+86     	; 0x306 <xModemReceiver+0xa2>
	{
		putchar(XMODEM_C);
		/* wait one sec for an answer from the sender */
		if (receiveChar(&j,1))
 2b0:	aa 24       	eor	r10, r10
 2b2:	bb 24       	eor	r11, r11
 2b4:	65 01       	movw	r12, r10
 2b6:	00 e0       	ldi	r16, 0x00	; 0
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	ff 24       	eor	r15, r15
 2be:	ee 24       	eor	r14, r14
 2c0:	e3 94       	inc	r14
			default:
				state = XMODEM_ST_IDLE;
		}
		
		/* wait for a char from the sender with timeout */
		if (!receiveChar(&j, 1))
 2c2:	4e 01       	movw	r8, r28
 2c4:	08 94       	sec
 2c6:	81 1c       	adc	r8, r1
 2c8:	91 1c       	adc	r9, r1
	}
	
	/* frame receiving loop */
	while(1)
	{
		switch (state)
 2ca:	23 30       	cpi	r18, 0x03	; 3
 2cc:	59 f1       	breq	.+86     	; 0x324 <xModemReceiver+0xc0>
 2ce:	24 30       	cpi	r18, 0x04	; 4
 2d0:	30 f4       	brcc	.+12     	; 0x2de <xModemReceiver+0x7a>
 2d2:	21 30       	cpi	r18, 0x01	; 1
 2d4:	d1 f0       	breq	.+52     	; 0x30a <xModemReceiver+0xa6>
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	22 30       	cpi	r18, 0x02	; 2
 2da:	e0 f4       	brcc	.+56     	; 0x314 <xModemReceiver+0xb0>
 2dc:	08 c0       	rjmp	.+16     	; 0x2ee <xModemReceiver+0x8a>
 2de:	25 30       	cpi	r18, 0x05	; 5
 2e0:	b9 f1       	breq	.+110    	; 0x350 <xModemReceiver+0xec>
 2e2:	25 30       	cpi	r18, 0x05	; 5
 2e4:	78 f1       	brcs	.+94     	; 0x344 <xModemReceiver+0xe0>
 2e6:	26 30       	cpi	r18, 0x06	; 6
 2e8:	09 f0       	breq	.+2      	; 0x2ec <xModemReceiver+0x88>
 2ea:	4c c0       	rjmp	.+152    	; 0x384 <xModemReceiver+0x120>
 2ec:	52 c0       	rjmp	.+164    	; 0x392 <xModemReceiver+0x12e>
		{
			/* idle: wait for a  start of header */
			case XMODEM_ST_IDLE:
				if (j==XMODEM_SOH)
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <xModemReceiver+0x90>
 2f2:	4a c0       	rjmp	.+148    	; 0x388 <xModemReceiver+0x124>
					state = XMODEM_ST_FN;
				if (j==XMODEM_EOT)
 2f4:	84 30       	cpi	r24, 0x04	; 4
 2f6:	09 f0       	breq	.+2      	; 0x2fa <xModemReceiver+0x96>
 2f8:	4c c0       	rjmp	.+152    	; 0x392 <xModemReceiver+0x12e>
				{
					putchar(XMODEM_ACK);
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	11 df       	rcall	.-478    	; 0x120 <putchar>
					putchar(XMODEM_ACK);
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	0f df       	rcall	.-482    	; 0x120 <putchar>
					putchar(XMODEM_ACK);
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	0d df       	rcall	.-486    	; 0x120 <putchar>
					LED_OFF();
 306:	41 98       	cbi	0x08, 1	; 8
					return;
 308:	4e c0       	rjmp	.+156    	; 0x3a6 <xModemReceiver+0x142>
				}
				break;
			/* check frame number */
			case XMODEM_ST_FN:
				if (j==frameNumber)
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	8e 15       	cp	r24, r14
 30e:	f1 f5       	brne	.+124    	; 0x38c <xModemReceiver+0x128>
					state = XMODEM_ST_IFN;
 310:	22 e0       	ldi	r18, 0x02	; 2
 312:	3f c0       	rjmp	.+126    	; 0x392 <xModemReceiver+0x12e>
				else 
					state = XMODEM_ST_ERR;
				break;
			/* check inverted frame number */
			case XMODEM_ST_IFN:
				if ((j^frameNumber)==0xff)
 314:	8e 25       	eor	r24, r14
 316:	8f 3f       	cpi	r24, 0xFF	; 255
 318:	c9 f5       	brne	.+114    	; 0x38c <xModemReceiver+0x128>
				{
					state = XMODEM_ST_RX;
					index = 0;
					crc = 0;
 31a:	00 e0       	ldi	r16, 0x00	; 0
 31c:	10 e0       	ldi	r17, 0x00	; 0
				break;
			/* check inverted frame number */
			case XMODEM_ST_IFN:
				if ((j^frameNumber)==0xff)
				{
					state = XMODEM_ST_RX;
 31e:	23 e0       	ldi	r18, 0x03	; 3
					index = 0;
 320:	ff 24       	eor	r15, r15
 322:	37 c0       	rjmp	.+110    	; 0x392 <xModemReceiver+0x12e>
				}
				else 
					state = XMODEM_ST_ERR;
				break;
			case XMODEM_ST_RX:
				xModemBuffer[index++]=j;
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	ef 2d       	mov	r30, r15
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	e7 5f       	subi	r30, 0xF7	; 247
 32c:	fe 4f       	sbci	r31, 0xFE	; 254
 32e:	80 83       	st	Z, r24
 330:	f3 94       	inc	r15
				crc = calcCRC(j,crc);
 332:	b8 01       	movw	r22, r16
 334:	2a 83       	std	Y+2, r18	; 0x02
 336:	d1 de       	rcall	.-606    	; 0xda <calcCRC>
 338:	8c 01       	movw	r16, r24
				if (index==128)
 33a:	2a 81       	ldd	r18, Y+2	; 0x02
 33c:	8f 2d       	mov	r24, r15
 33e:	80 38       	cpi	r24, 0x80	; 128
 340:	41 f5       	brne	.+80     	; 0x392 <xModemReceiver+0x12e>
 342:	26 c0       	rjmp	.+76     	; 0x390 <xModemReceiver+0x12c>
					state = XMODEM_ST_CRC1;
				break;
			case XMODEM_ST_CRC1:
				crc = calcCRC(j,crc);
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	b8 01       	movw	r22, r16
 348:	c8 de       	rcall	.-624    	; 0xda <calcCRC>
 34a:	8c 01       	movw	r16, r24
				state = XMODEM_ST_CRC2;
 34c:	25 e0       	ldi	r18, 0x05	; 5
				break;
 34e:	21 c0       	rjmp	.+66     	; 0x392 <xModemReceiver+0x12e>
			case XMODEM_ST_CRC2:
				crc = calcCRC(j,crc);
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	b8 01       	movw	r22, r16
 354:	c2 de       	rcall	.-636    	; 0xda <calcCRC>
 356:	8c 01       	movw	r16, r24
				if (crc == 0)
 358:	00 97       	sbiw	r24, 0x00	; 0
 35a:	91 f4       	brne	.+36     	; 0x380 <xModemReceiver+0x11c>
				{
					frameNumber++;
 35c:	e3 94       	inc	r14
					/* write bytes, do this before the ack to implement a flow control */
					writeFlash(xModemBuffer,flashIndex,128);
 35e:	89 e0       	ldi	r24, 0x09	; 9
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	b6 01       	movw	r22, r12
 364:	a5 01       	movw	r20, r10
 366:	20 e8       	ldi	r18, 0x80	; 128
 368:	27 df       	rcall	.-434    	; 0x1b8 <writeFlash>
					
					/* tell the sender that we are ready to accept the next block */
					putchar(XMODEM_ACK);
 36a:	86 e0       	ldi	r24, 0x06	; 6
 36c:	d9 de       	rcall	.-590    	; 0x120 <putchar>
					flashIndex+=128;
 36e:	80 e8       	ldi	r24, 0x80	; 128
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	a0 e0       	ldi	r26, 0x00	; 0
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	a8 0e       	add	r10, r24
 378:	b9 1e       	adc	r11, r25
 37a:	ca 1e       	adc	r12, r26
 37c:	db 1e       	adc	r13, r27
 37e:	02 c0       	rjmp	.+4      	; 0x384 <xModemReceiver+0x120>
				}
				else
				{
					putchar(XMODEM_NACK);
 380:	85 e1       	ldi	r24, 0x15	; 21
 382:	ce de       	rcall	.-612    	; 0x120 <putchar>
				}
				state = XMODEM_ST_IDLE;
 384:	20 e0       	ldi	r18, 0x00	; 0
 386:	05 c0       	rjmp	.+10     	; 0x392 <xModemReceiver+0x12e>
		switch (state)
		{
			/* idle: wait for a  start of header */
			case XMODEM_ST_IDLE:
				if (j==XMODEM_SOH)
					state = XMODEM_ST_FN;
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	03 c0       	rjmp	.+6      	; 0x392 <xModemReceiver+0x12e>
					state = XMODEM_ST_RX;
					index = 0;
					crc = 0;
				}
				else 
					state = XMODEM_ST_ERR;
 38c:	26 e0       	ldi	r18, 0x06	; 6
 38e:	01 c0       	rjmp	.+2      	; 0x392 <xModemReceiver+0x12e>
				break;
			case XMODEM_ST_RX:
				xModemBuffer[index++]=j;
				crc = calcCRC(j,crc);
				if (index==128)
					state = XMODEM_ST_CRC1;
 390:	24 e0       	ldi	r18, 0x04	; 4
			default:
				state = XMODEM_ST_IDLE;
		}
		
		/* wait for a char from the sender with timeout */
		if (!receiveChar(&j, 1))
 392:	c4 01       	movw	r24, r8
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	2a 83       	std	Y+2, r18	; 0x02
 398:	cc de       	rcall	.-616    	; 0x132 <receiveChar>
 39a:	2a 81       	ldd	r18, Y+2	; 0x02
 39c:	88 23       	and	r24, r24
 39e:	09 f0       	breq	.+2      	; 0x3a2 <xModemReceiver+0x13e>
 3a0:	94 cf       	rjmp	.-216    	; 0x2ca <xModemReceiver+0x66>
		{
			/* nothing happend, send nack and go to idle */
			state = XMODEM_ST_IDLE;
			putchar(XMODEM_NACK);
 3a2:	85 e1       	ldi	r24, 0x15	; 21
 3a4:	bd de       	rcall	.-646    	; 0x120 <putchar>
		}

	}
	
	
}
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	cf 91       	pop	r28
 3ac:	df 91       	pop	r29
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	bf 90       	pop	r11
 3bc:	af 90       	pop	r10
 3be:	9f 90       	pop	r9
 3c0:	8f 90       	pop	r8
 3c2:	08 95       	ret

000003c4 <readFlash>:
	d       pointer to store the data to
	adr		address to read the first byte from (adr is auto incrmented)
	len		number of bytes to read
*/
uint8_t readFlash(uint8_t *d, uint32_t adr, uint8_t len)
{
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	df 93       	push	r29
 3d2:	cf 93       	push	r28
 3d4:	0f 92       	push	r0
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	d8 2e       	mov	r13, r24
 3dc:	7a 01       	movw	r14, r20
 3de:	8b 01       	movw	r16, r22
 3e0:	c2 2e       	mov	r12, r18
	/* deactivate hold condition */
	SET_FLASH_HOLD();
 3e2:	5f 9a       	sbi	0x0b, 7	; 11
	/* setup correct spi mode */
	SPCR = (0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (0<<SPR0);
 3e4:	82 e5       	ldi	r24, 0x52	; 82
 3e6:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
 3e8:	1d bc       	out	0x2d, r1	; 45
	/* check validity of address */
	if (adr >= FLASH_SIZE)
 3ea:	40 30       	cpi	r20, 0x00	; 0
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	52 07       	cpc	r21, r18
 3f0:	22 e0       	ldi	r18, 0x02	; 2
 3f2:	62 07       	cpc	r22, r18
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	72 07       	cpc	r23, r18
 3f8:	d8 f4       	brcc	.+54     	; 0x430 <readFlash+0x6c>
		return 0; 
	/* select flash */
	CLR_FLASH_CS();
 3fa:	29 98       	cbi	0x05, 1	; 5
	//asm("nop");
	/* send read command */	
	spiTransfer(FLASH_READ);
 3fc:	83 e0       	ldi	r24, 0x03	; 3
 3fe:	99 83       	std	Y+1, r25	; 0x01
 400:	b9 de       	rcall	.-654    	; 0x174 <spiTransfer>
	/* send the address */
	spiTransfer((adr>>16)&0xff);
 402:	80 2f       	mov	r24, r16
 404:	b7 de       	rcall	.-658    	; 0x174 <spiTransfer>
	spiTransfer((adr>>8)&0xff);
 406:	8f 2d       	mov	r24, r15
 408:	b5 de       	rcall	.-662    	; 0x174 <spiTransfer>
	spiTransfer(adr&0xff);
 40a:	8e 2d       	mov	r24, r14
 40c:	b3 de       	rcall	.-666    	; 0x174 <spiTransfer>
	/* read the data bytes */
	for (uint8_t i=0; i<len; i++)
 40e:	99 81       	ldd	r25, Y+1	; 0x01
 410:	6d 2d       	mov	r22, r13
 412:	79 2f       	mov	r23, r25
 414:	7b 01       	movw	r14, r22
 416:	05 c0       	rjmp	.+10     	; 0x422 <readFlash+0x5e>
		d[i] = spiTransfer(0);
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	ac de       	rcall	.-680    	; 0x174 <spiTransfer>
 41c:	f7 01       	movw	r30, r14
 41e:	81 93       	st	Z+, r24
 420:	7f 01       	movw	r14, r30
	/* send the address */
	spiTransfer((adr>>16)&0xff);
	spiTransfer((adr>>8)&0xff);
	spiTransfer(adr&0xff);
	/* read the data bytes */
	for (uint8_t i=0; i<len; i++)
 422:	8e 2d       	mov	r24, r14
 424:	8d 19       	sub	r24, r13
 426:	8c 15       	cp	r24, r12
 428:	b8 f3       	brcs	.-18     	; 0x418 <readFlash+0x54>
		d[i] = spiTransfer(0);
	/* deactivate the flash */
	SET_FLASH_CS();
 42a:	29 9a       	sbi	0x05, 1	; 5
	return 1;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	01 c0       	rjmp	.+2      	; 0x432 <readFlash+0x6e>
	/* setup correct spi mode */
	SPCR = (0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (0<<SPR0);
	SPSR = 0;
	/* check validity of address */
	if (adr >= FLASH_SIZE)
		return 0; 
 430:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i=0; i<len; i++)
		d[i] = spiTransfer(0);
	/* deactivate the flash */
	SET_FLASH_CS();
	return 1;
}
 432:	0f 90       	pop	r0
 434:	cf 91       	pop	r28
 436:	df 91       	pop	r29
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	df 90       	pop	r13
 442:	cf 90       	pop	r12
 444:	08 95       	ret

00000446 <init>:
}


void init()
{
	CLR_LOAD();
 446:	5d 9a       	sbi	0x0b, 5	; 11

	/* setup timer 2: ctc 10ms, div by 64 prescaler */
	OCR1A  = (uint16_t)((((int32_t)F_CPU)/(((uint32_t)64)*FRAME_RATE))-1);
 448:	89 ef       	ldi	r24, 0xF9	; 249
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	90 93 89 00 	sts	0x0089, r25
 450:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0;	
 454:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = (0<<WGM11) | (0<<WGM10);
 458:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS22) | (1<<CS21) | (1<<CS20);
 45c:	8b e0       	ldi	r24, 0x0B	; 11
 45e:	80 93 81 00 	sts	0x0081, r24
	
	/* init uart: 19200 baud, 8 data bits, 1 stop bit, no parity */
	UCSR0A = (0<<U2X0);
 462:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);	// enable RX interrupt
 466:	88 e9       	ldi	r24, 0x98	; 152
 468:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 46c:	86 e0       	ldi	r24, 0x06	; 6
 46e:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 51;
 472:	83 e3       	ldi	r24, 0x33	; 51
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	90 93 c5 00 	sts	0x00C5, r25
 47a:	80 93 c4 00 	sts	0x00C4, r24
	
	DDRD = (1<<7) | (1<<5);
 47e:	80 ea       	ldi	r24, 0xA0	; 160
 480:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1<<5) | (1<<3) | (1<<1);
 482:	8a e2       	ldi	r24, 0x2A	; 42
 484:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<1);	// led output
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	87 b9       	out	0x07, r24	; 7
	
	/* default: all ports with pull ups */
	PORTB = 0xff;
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xff;
 48e:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xff;
 490:	8b b9       	out	0x0b, r24	; 11
	
	SET_FLASH_CS();
 492:	29 9a       	sbi	0x05, 1	; 5
	SET_FLASH_HOLD();
 494:	5f 9a       	sbi	0x0b, 7	; 11
	
	LED_OFF();
 496:	41 98       	cbi	0x08, 1	; 8
}
 498:	08 95       	ret

0000049a <main>:
/**********************************************************************************************************
*   I M P L E M E N T A T I O N
*/

int main (void)
{
 49a:	bf 92       	push	r11
 49c:	cf 92       	push	r12
 49e:	df 92       	push	r13
 4a0:	ef 92       	push	r14
 4a2:	ff 92       	push	r15
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	df 93       	push	r29
 4aa:	cf 93       	push	r28
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	28 97       	sbiw	r28, 0x08	; 8
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
	/* one data frame to send to the relais */
	unsigned char data[LINE_LENGTH] = {0x00};
 4bc:	6e 01       	movw	r12, r28
 4be:	08 94       	sec
 4c0:	c1 1c       	adc	r12, r1
 4c2:	d1 1c       	adc	r13, r1
 4c4:	88 e0       	ldi	r24, 0x08	; 8
 4c6:	d6 01       	movw	r26, r12
 4c8:	1d 92       	st	X+, r1
 4ca:	8a 95       	dec	r24
 4cc:	e9 f7       	brne	.-6      	; 0x4c8 <main+0x2e>

	uint16_t cycle=0, numCycles=0;
	/* initalize the hardware components */
	init();
 4ce:	bb df       	rcall	.-138    	; 0x446 <init>
	sei();
 4d0:	78 94       	sei
	uint32_t bubbleEndTick = 0;
	
	
	// clear line buffer;
	for (int i=0; i<LINE_LENGTH; i++)
		data[i] = 0;
 4d2:	19 82       	std	Y+1, r1	; 0x01
 4d4:	1a 82       	std	Y+2, r1	; 0x02
 4d6:	1b 82       	std	Y+3, r1	; 0x03
 4d8:	1c 82       	std	Y+4, r1	; 0x04
 4da:	1d 82       	std	Y+5, r1	; 0x05
 4dc:	1e 82       	std	Y+6, r1	; 0x06
 4de:	1f 82       	std	Y+7, r1	; 0x07
 4e0:	18 86       	std	Y+8, r1	; 0x08
 4e2:	ee 24       	eor	r14, r14
 4e4:	ff 24       	eor	r15, r15
 4e6:	87 01       	movw	r16, r14
 4e8:	bb 24       	eor	r11, r11
		cli();
		sysTick++;
		sei();
		
		// update the solenoids
		writeRegs(data);
 4ea:	c6 01       	movw	r24, r12
 4ec:	dc 2c       	mov	r13, r12
 4ee:	c9 2e       	mov	r12, r25
		data[i] = 0;
	
	for(cycle=0;1;cycle++)
	{
		// wait for a timeout (occures every 1/FRAME_RATE seconds) 
		waitForTimer();
 4f0:	b2 dd       	rcall	.-1180   	; 0x56 <waitForTimer>
		
		// inc system tick (time base)
		cli();
 4f2:	f8 94       	cli
		sysTick++;
 4f4:	80 91 00 01 	lds	r24, 0x0100
 4f8:	90 91 01 01 	lds	r25, 0x0101
 4fc:	a0 91 02 01 	lds	r26, 0x0102
 500:	b0 91 03 01 	lds	r27, 0x0103
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	a1 1d       	adc	r26, r1
 508:	b1 1d       	adc	r27, r1
 50a:	80 93 00 01 	sts	0x0100, r24
 50e:	90 93 01 01 	sts	0x0101, r25
 512:	a0 93 02 01 	sts	0x0102, r26
 516:	b0 93 03 01 	sts	0x0103, r27
		sei();
 51a:	78 94       	sei
		
		// update the solenoids
		writeRegs(data);
 51c:	8d 2d       	mov	r24, r13
 51e:	9c 2d       	mov	r25, r12
 520:	31 de       	rcall	.-926    	; 0x184 <writeRegs>
		
		if (bubbleEndTick <= sysTick)
 522:	80 91 00 01 	lds	r24, 0x0100
 526:	90 91 01 01 	lds	r25, 0x0101
 52a:	a0 91 02 01 	lds	r26, 0x0102
 52e:	b0 91 03 01 	lds	r27, 0x0103
 532:	8e 15       	cp	r24, r14
 534:	9f 05       	cpc	r25, r15
 536:	a0 07       	cpc	r26, r16
 538:	b1 07       	cpc	r27, r17
 53a:	40 f0       	brcs	.+16     	; 0x54c <__stack+0x4d>
		{
			// bubbles are finished -> close all valves
			for (int i=0; i<LINE_LENGTH; i++)
				data[i] = 0;
 53c:	19 82       	std	Y+1, r1	; 0x01
 53e:	1a 82       	std	Y+2, r1	; 0x02
 540:	1b 82       	std	Y+3, r1	; 0x03
 542:	1c 82       	std	Y+4, r1	; 0x04
 544:	1d 82       	std	Y+5, r1	; 0x05
 546:	1e 82       	std	Y+6, r1	; 0x06
 548:	1f 82       	std	Y+7, r1	; 0x07
 54a:	18 86       	std	Y+8, r1	; 0x08
		}
		
		// check for new data
		cli();
 54c:	f8 94       	cli
		if (rxInd == LINE_LENGTH)
 54e:	80 91 04 01 	lds	r24, 0x0104
 552:	88 30       	cpi	r24, 0x08	; 8
 554:	f9 f4       	brne	.+62     	; 0x594 <__stack+0x95>
		{
			// we received a new frame -> start creating bubbles
			bubbleEndTick = sysTick + BUBBLE_SIZE;
 556:	e0 90 00 01 	lds	r14, 0x0100
 55a:	f0 90 01 01 	lds	r15, 0x0101
 55e:	00 91 02 01 	lds	r16, 0x0102
 562:	10 91 03 01 	lds	r17, 0x0103
 566:	84 e1       	ldi	r24, 0x14	; 20
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	a0 e0       	ldi	r26, 0x00	; 0
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	e8 0e       	add	r14, r24
 570:	f9 1e       	adc	r15, r25
 572:	0a 1f       	adc	r16, r26
 574:	1b 1f       	adc	r17, r27
 576:	8d 2d       	mov	r24, r13
 578:	9c 2d       	mov	r25, r12
 57a:	fc 01       	movw	r30, r24
 57c:	87 e0       	ldi	r24, 0x07	; 7
 57e:	90 e0       	ldi	r25, 0x00	; 0
			// flip data because HW is flipped
			for (i=0; i<LINE_LENGTH; i++)
			{
				data[i] = rxBuf[LINE_LENGTH-1-i];	
 580:	dc 01       	movw	r26, r24
 582:	a6 57       	subi	r26, 0x76	; 118
 584:	be 4f       	sbci	r27, 0xFE	; 254
 586:	2c 91       	ld	r18, X
 588:	21 93       	st	Z+, r18
 58a:	01 97       	sbiw	r24, 0x01	; 1
		if (rxInd == LINE_LENGTH)
		{
			// we received a new frame -> start creating bubbles
			bubbleEndTick = sysTick + BUBBLE_SIZE;
			// flip data because HW is flipped
			for (i=0; i<LINE_LENGTH; i++)
 58c:	af ef       	ldi	r26, 0xFF	; 255
 58e:	8f 3f       	cpi	r24, 0xFF	; 255
 590:	9a 07       	cpc	r25, r26
 592:	b1 f7       	brne	.-20     	; 0x580 <__stack+0x81>
				data[i] = rxBuf[LINE_LENGTH-1-i];	
			}
		}
		
		// check for uart transmission timeouts
		if ((sysTick-rxStart) > RX_TIMEOUT)
 594:	20 91 00 01 	lds	r18, 0x0100
 598:	30 91 01 01 	lds	r19, 0x0101
 59c:	40 91 02 01 	lds	r20, 0x0102
 5a0:	50 91 03 01 	lds	r21, 0x0103
 5a4:	60 91 05 01 	lds	r22, 0x0105
 5a8:	70 91 06 01 	lds	r23, 0x0106
 5ac:	80 91 07 01 	lds	r24, 0x0107
 5b0:	90 91 08 01 	lds	r25, 0x0108
 5b4:	26 1b       	sub	r18, r22
 5b6:	37 0b       	sbc	r19, r23
 5b8:	48 0b       	sbc	r20, r24
 5ba:	59 0b       	sbc	r21, r25
 5bc:	25 31       	cpi	r18, 0x15	; 21
 5be:	31 05       	cpc	r19, r1
 5c0:	41 05       	cpc	r20, r1
 5c2:	51 05       	cpc	r21, r1
 5c4:	10 f0       	brcs	.+4      	; 0x5ca <__stack+0xcb>
		{
			// reset receive index, ie abort reception
			rxInd = 0;
 5c6:	10 92 04 01 	sts	0x0104, r1
		}
		sei();
 5ca:	78 94       	sei
		
		// create a 1hz heart beat on the led 
		if (ledCnt == 1)
 5cc:	bb 2d       	mov	r27, r11
 5ce:	b1 30       	cpi	r27, 0x01	; 1
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <__stack+0xd5>
			LED_TOGGLE();
 5d2:	31 9a       	sbi	0x06, 1	; 6
		if (ledCnt == FRAME_RATE)
			ledCnt = 0;
		else
			ledCnt++;
 5d4:	b3 94       	inc	r11
			
			// force re-read of numCycles from flash
			numCycles = 0;
			continue;
		}*/
	}
 5d6:	8c cf       	rjmp	.-232    	; 0x4f0 <main+0x56>

000005d8 <_exit>:
 5d8:	f8 94       	cli

000005da <__stop_program>:
 5da:	ff cf       	rjmp	.-2      	; 0x5da <__stop_program>
